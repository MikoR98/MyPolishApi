// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyPolishApi.Entity;

namespace MyPolishApi.Entity.Migrations
{
    [DbContext(typeof(MyPolishApiDbContext))]
    partial class MyPolishApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.AccountInfo", b =>
                {
                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccountHolderType")
                        .HasColumnType("int");

                    b.Property<string>("AccountNameClient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BicOrSwift")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BookingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAddressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VatAccountNrb")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountNumber");

                    b.HasIndex("AccountType")
                        .HasFilter("[AccountType] IS NOT NULL");

                    b.HasIndex("BicOrSwift")
                        .HasFilter("[BicOrSwift] IS NOT NULL");

                    b.HasIndex("NameAddressId")
                        .HasFilter("[NameAddressId] IS NOT NULL");

                    b.ToTable("AccountInfo");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.AccountPsuRelation", b =>
                {
                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Stake")
                        .HasColumnType("int");

                    b.Property<int?>("TypeOfProxy")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfRelation")
                        .HasColumnType("int");

                    b.HasKey("AccountNumber");

                    b.ToTable("AccountPsuRelation");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.Bank", b =>
                {
                    b.Property<string>("BicOrSwift")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAddressId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BicOrSwift");

                    b.HasIndex("NameAddressId")
                        .HasFilter("[NameAddressId] IS NOT NULL");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.BankAccountInfo", b =>
                {
                    b.Property<string>("BicOrSwift")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAddressId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BicOrSwift");

                    b.HasIndex("NameAddressId")
                        .HasFilter("[NameAddressId] IS NOT NULL");

                    b.ToTable("BankAccountInfo");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.DictionaryItem", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("DictionaryItem");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.LinkedAccount", b =>
                {
                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LinkedAccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountNumber", "LinkedAccountNumber");

                    b.HasIndex("AccountNumber");

                    b.ToTable("LinkedAccount");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.NameAddress", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NameAddress");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.SenderRecipient", b =>
                {
                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountMassPayment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BicOrSwift")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameAddressId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountNumber");

                    b.HasIndex("BicOrSwift")
                        .HasFilter("[BicOrSwift] IS NOT NULL");

                    b.HasIndex("NameAddressId")
                        .HasFilter("[NameAddressId] IS NOT NULL");

                    b.ToTable("SenderRecipient");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionCancelledInfo", b =>
                {
                    b.Property<string>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Initiator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mcc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("TradeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionCategory")
                        .HasColumnType("int");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.HasIndex("Initiator")
                        .HasFilter("[Initiator] IS NOT NULL");

                    b.HasIndex("RecipientId")
                        .HasFilter("[RecipientId] IS NOT NULL");

                    b.HasIndex("SenderId")
                        .HasFilter("[SenderId] IS NOT NULL");

                    b.HasIndex("TransactionStatus")
                        .HasFilter("[TransactionStatus] IS NOT NULL");

                    b.ToTable("TransactionCancelledInfo");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionInfo", b =>
                {
                    b.Property<string>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Initiator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mcc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PostTransactionBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RecipientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("TradeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionCategory")
                        .HasColumnType("int");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.HasIndex("Initiator")
                        .HasFilter("[Initiator] IS NOT NULL");

                    b.HasIndex("RecipientId")
                        .HasFilter("[RecipientId] IS NOT NULL");

                    b.HasIndex("SenderId")
                        .HasFilter("[SenderId] IS NOT NULL");

                    b.HasIndex("TransactionStatus")
                        .HasFilter("[TransactionStatus] IS NOT NULL");

                    b.ToTable("TransactionInfo");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionPendingInfo", b =>
                {
                    b.Property<string>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Initiator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mcc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("TradeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionCategory")
                        .HasColumnType("int");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.HasIndex("Initiator")
                        .HasFilter("[Initiator] IS NOT NULL");

                    b.HasIndex("RecipientId")
                        .HasFilter("[RecipientId] IS NOT NULL");

                    b.HasIndex("SenderId")
                        .HasFilter("[SenderId] IS NOT NULL");

                    b.ToTable("TransactionPendingInfo");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionRejectedInfo", b =>
                {
                    b.Property<string>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Initiator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mcc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("TradeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionCategory")
                        .HasColumnType("int");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.HasIndex("Initiator")
                        .HasFilter("[Initiator] IS NOT NULL");

                    b.HasIndex("RecipientId")
                        .HasFilter("[RecipientId] IS NOT NULL");

                    b.HasIndex("SenderId")
                        .HasFilter("[SenderId] IS NOT NULL");

                    b.ToTable("TransactionRejectedInfo");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionScheduledInfo", b =>
                {
                    b.Property<string>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Initiator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mcc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("TradeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionCategory")
                        .HasColumnType("int");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.HasIndex("Initiator")
                        .HasFilter("[Initiator] IS NOT NULL");

                    b.HasIndex("RecipientId")
                        .HasFilter("[RecipientId] IS NOT NULL");

                    b.HasIndex("SenderId")
                        .HasFilter("[SenderId] IS NOT NULL");

                    b.HasIndex("TransactionStatus")
                        .HasFilter("[TransactionStatus] IS NOT NULL");

                    b.ToTable("TransactionScheduledInfo");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.UserAccount", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Login");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.AccountInfo", b =>
                {
                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.DictionaryItem", "DictionaryItem")
                        .WithOne("AccountInfo")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.AccountInfo", "AccountType");

                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.BankAccountInfo", "BankAccountInfo")
                        .WithOne("AccountInfo")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.AccountInfo", "BicOrSwift");

                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.NameAddress", "NameAddress")
                        .WithOne("AccountInfo")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.AccountInfo", "NameAddressId");

                    b.Navigation("BankAccountInfo");

                    b.Navigation("DictionaryItem");

                    b.Navigation("NameAddress");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.AccountPsuRelation", b =>
                {
                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.AccountInfo", "AccountInfo")
                        .WithOne("PsuRelations")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.AccountPsuRelation", "AccountNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountInfo");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.Bank", b =>
                {
                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.NameAddress", "NameAddress")
                        .WithOne("Bank")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.Bank", "NameAddressId");

                    b.Navigation("NameAddress");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.BankAccountInfo", b =>
                {
                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.NameAddress", "NameAddress")
                        .WithOne("BankAccountInfo")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.BankAccountInfo", "NameAddressId");

                    b.Navigation("NameAddress");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.LinkedAccount", b =>
                {
                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.AccountInfo", "AccountInfo")
                        .WithMany("LinkedAccount")
                        .HasForeignKey("AccountNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountInfo");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.SenderRecipient", b =>
                {
                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.Bank", "Bank")
                        .WithOne("SenderRecipient")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.SenderRecipient", "BicOrSwift");

                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.NameAddress", "NameAddress")
                        .WithOne("SenderRecipient")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.SenderRecipient", "NameAddressId");

                    b.Navigation("Bank");

                    b.Navigation("NameAddress");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionCancelledInfo", b =>
                {
                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.NameAddress", "NameAddress")
                        .WithOne("TransactionCancelledInfo")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionCancelledInfo", "Initiator");

                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.SenderRecipient", "Recipient")
                        .WithOne("TransactionCancelledInfoRecipient")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionCancelledInfo", "RecipientId");

                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.SenderRecipient", "Sender")
                        .WithOne("TransactionCancelledInfoSender")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionCancelledInfo", "SenderId");

                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.DictionaryItem", "DictionaryItem")
                        .WithOne("TransactionCancelledInfo")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionCancelledInfo", "TransactionStatus");

                    b.Navigation("DictionaryItem");

                    b.Navigation("NameAddress");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionInfo", b =>
                {
                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.NameAddress", "NameAddress")
                        .WithOne("TransactionInfo")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionInfo", "Initiator");

                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.SenderRecipient", "Recipient")
                        .WithOne("TransactionInfoRecipient")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionInfo", "RecipientId");

                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.SenderRecipient", "Sender")
                        .WithOne("TransactionInfoSender")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionInfo", "SenderId");

                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.DictionaryItem", "DictionaryItem")
                        .WithOne("TransactionInfo")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionInfo", "TransactionStatus");

                    b.Navigation("DictionaryItem");

                    b.Navigation("NameAddress");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionPendingInfo", b =>
                {
                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.NameAddress", "NameAddress")
                        .WithOne("TransactionPendingInfo")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionPendingInfo", "Initiator");

                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.SenderRecipient", "Recipient")
                        .WithOne("TransactionPendingInfoRecipient")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionPendingInfo", "RecipientId");

                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.SenderRecipient", "Sender")
                        .WithOne("TransactionPendingInfoSender")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionPendingInfo", "SenderId");

                    b.Navigation("NameAddress");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionRejectedInfo", b =>
                {
                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.NameAddress", "NameAddress")
                        .WithOne("TransactionRejectedInfo")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionRejectedInfo", "Initiator");

                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.SenderRecipient", "Recipient")
                        .WithOne("TransactionRejectedInfoRecipient")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionRejectedInfo", "RecipientId");

                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.SenderRecipient", "Sender")
                        .WithOne("TransactionRejectedInfoSender")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionRejectedInfo", "SenderId");

                    b.Navigation("NameAddress");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionScheduledInfo", b =>
                {
                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.NameAddress", "NameAddress")
                        .WithOne("TransactionScheduledInfo")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionScheduledInfo", "Initiator");

                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.SenderRecipient", "Recipient")
                        .WithOne("TransactionScheduledInfoRecipient")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionScheduledInfo", "RecipientId");

                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.SenderRecipient", "Sender")
                        .WithOne("TransactionScheduledInfoSender")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionScheduledInfo", "SenderId");

                    b.HasOne("MyPolishApi.Entity.Model.AccountInformationServiceModel.DictionaryItem", "DictionaryItem")
                        .WithOne("TransactionScheduledInfo")
                        .HasForeignKey("MyPolishApi.Entity.Model.AccountInformationServiceModel.TransactionScheduledInfo", "TransactionStatus");

                    b.Navigation("DictionaryItem");

                    b.Navigation("NameAddress");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.AccountInfo", b =>
                {
                    b.Navigation("LinkedAccount");

                    b.Navigation("PsuRelations");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.Bank", b =>
                {
                    b.Navigation("SenderRecipient");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.BankAccountInfo", b =>
                {
                    b.Navigation("AccountInfo");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.DictionaryItem", b =>
                {
                    b.Navigation("AccountInfo");

                    b.Navigation("TransactionCancelledInfo");

                    b.Navigation("TransactionInfo");

                    b.Navigation("TransactionScheduledInfo");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.NameAddress", b =>
                {
                    b.Navigation("AccountInfo");

                    b.Navigation("Bank");

                    b.Navigation("BankAccountInfo");

                    b.Navigation("SenderRecipient");

                    b.Navigation("TransactionCancelledInfo");

                    b.Navigation("TransactionInfo");

                    b.Navigation("TransactionPendingInfo");

                    b.Navigation("TransactionRejectedInfo");

                    b.Navigation("TransactionScheduledInfo");
                });

            modelBuilder.Entity("MyPolishApi.Entity.Model.AccountInformationServiceModel.SenderRecipient", b =>
                {
                    b.Navigation("TransactionCancelledInfoRecipient");

                    b.Navigation("TransactionCancelledInfoSender");

                    b.Navigation("TransactionInfoRecipient");

                    b.Navigation("TransactionInfoSender");

                    b.Navigation("TransactionPendingInfoRecipient");

                    b.Navigation("TransactionPendingInfoSender");

                    b.Navigation("TransactionRejectedInfoRecipient");

                    b.Navigation("TransactionRejectedInfoSender");

                    b.Navigation("TransactionScheduledInfoRecipient");

                    b.Navigation("TransactionScheduledInfoSender");
                });
#pragma warning restore 612, 618
        }
    }
}
